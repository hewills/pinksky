// main global script file

AudioChannel* music_channel;
DrawingSurface *backgroundsurface;
export music_channel;

int x = 0;
Stations station[10];
Planet sun;
Planet earth;
Planet mars;

export station;
export sun;
export earth;
export mars;

//---------------------------------------------------------------------------

//Pass array sound file string to play the correct sound.
function RadioPlay(String soundfile)  {
  
  if (soundfile == "aRadiobad1") aRadiobad1.Play(eRepeat);   
  if (soundfile == "aRadiobad2") aRadiobad2.Play(eRepeat);
  if (soundfile == "aRadiobad3") aRadiobad3.Play(eRepeat);
  if (soundfile == "aRadiobad4") aRadiobad4.Play(eRepeat);
  if (soundfile == "aRadiobad5") aRadiobad5.Play(eRepeat);
  if (soundfile == "aRadioearth") aRadioearth.Play(eRepeat);
  if (soundfile == "aRadiomars") aRadiomars.Play(eRepeat);
  if (soundfile == "aRadiosun") aRadiosun.Play(eRepeat);
  if (soundfile == "aRadiostatic") aRadiostatic.Play(eRepeat);
  if (soundfile == "aRadiotuning") aRadiotuning.Play(eRepeat); 
}

//Pass array sound file string to play the correct sound.
function RadioStop(String soundfile)  {
  
  if (soundfile == "aRadiobad1") aRadiobad1.Stop();   
  if (soundfile == "aRadiobad2") aRadiobad2.Stop();
  if (soundfile == "aRadiobad3") aRadiobad3.Stop();
  if (soundfile == "aRadiobad4") aRadiobad4.Stop();
  if (soundfile == "aRadiobad5") aRadiobad5.Stop();
  if (soundfile == "aRadioearth") aRadioearth.Stop();
  if (soundfile == "aRadiomars") aRadiomars.Stop();
  if (soundfile == "aRadiosun") aRadiosun.Stop();
  if (soundfile == "aRadiostatic") aRadiostatic.Stop();
  if (soundfile == "aRadiotuning") aRadiotuning.Stop(); 
  
}
// ------------  End Sound File -----------------------------------

// ------------  Sky Change Function ------------------------------
function SkyChange(int skyid,  int seedrill)  {
  
  backgroundsurface = Room.GetDrawingSurfaceForBackground();
  
 if ( skyid == 0) {
   player.Tint(0, 0, 0,85, 0);
   backgroundsurface.DrawImage(0,0,33);
   backgroundsurface.Release();
   Wait(5);
   Display("Oh no! The sun dropped behind the horizon...");
   Wait(5);
   player.Think("The drop in temperature has frozen you stiff.");
   player.Think("Looks like you'll be here on Phobos...forever.");
   
   //Stop sound effect
   aWind.Stop();
   player.ChangeRoom(34);
   playerDead=1;  //Mark player as dead
   gRestartYN.Visible=true;
  }
  
  if ( skyid == 1) {
   
      if (seedrill==1)
      {  backgroundsurface.DrawImage(0,0,35);}
      else if (seedrill==2)
      {
        backgroundsurface.DrawImage(0,0,36);  //Hatch
      }
      else
      {  backgroundsurface.DrawImage(0,0,34);}

    backgroundsurface.Release();
  }
  
  if ( skyid == 2) {
   player.Tint(0, 0, 0,10, 0);
   
      if (seedrill==1)
      {  backgroundsurface.DrawImage(0,0,38);}
      else if (seedrill==2)
      {
        backgroundsurface.DrawImage(0,0,39);  //Hatch
      }
      else 
      {  backgroundsurface.DrawImage(0,0,37);}

   backgroundsurface.Release();
   }
  
  if ( skyid == 3) {
   player.Tint(0, 0, 0,30, 0); 
   
      if (seedrill==1)
      {  backgroundsurface.DrawImage(0,0,41);}
      else if (seedrill==2)
      {
        backgroundsurface.DrawImage(0,0,42);  //Hatch
      }
      else 
      {  backgroundsurface.DrawImage(0,0,40);}
      
   backgroundsurface.Release();   
   }
  
  if ( skyid == 4) {
   player.Tint(0, 0, 0,60, 0); 
   
      if (seedrill==1)
      {  backgroundsurface.DrawImage(0,0,44);}
      else if (seedrill==2)
      {
        backgroundsurface.DrawImage(0,0,45);  //Hatch
      }
      else 
      {  backgroundsurface.DrawImage(0,0,43);}

   backgroundsurface.Release();   
   } 
 
}
// ------------------- End skychange function ---------------



// A function that initializes a bunch of stuff. ------------
function initialize_control_panel() { 

  // Centre the control panel
  gControlPanel.Centre();
  mouse.DisableMode(eModeTalkto);
  
  // Centre the Restart dialog as well
  gRestartYN.Centre(); 
    
  //And now, set all the defaults
  System.Volume = 70;
  sldAudio.Value = System.Volume;
  SetGameSpeed(60);
  sldSpeed.Value = 60;
 
}
// ------------------- End Initialize -----------------------


// ------------------- Save Game Dialog ----------------------------
function show_save_game_dialog()
{
  
  gSaveGame.Visible = true;
  // Get the list of save games
  lstSaveGamesList.FillSaveGameList();
  
  if (lstSaveGamesList.ItemCount > 0)
  {
    // If there is at least one, set the default text
    // to be the first game's name
    txtNewSaveName.Text = lstSaveGamesList.Items[0];
  }
  else
  {
    // No save games yet, default empty text.
    txtNewSaveName.Text = "";
  }
  mouse.UseModeGraphic(eModePointer);

}
// ------------------End Save Dialog-----------------------------


//------------------ Restore Game Dialog ---------------------
function show_restore_game_dialog()
{
  gRestoreGame.Visible = true;
  lstRestoreGamesList.FillSaveGameList();
  mouse.UseModeGraphic(eModePointer);
  
}
//------------------End Restore Dialog---------------------------


// --- SAVE functions ----
function close_save_game_dialog()
{
  gSaveGame.Visible = false;
  mouse.UseDefaultGraphic();
}

function btnCancelSave_OnClick(GUIControl *control, MouseButton button)
{
  close_save_game_dialog();
}

function btnSaveGame_OnClick(GUIControl *control, MouseButton button)
{
  int gameSlotToSaveInto = lstSaveGamesList.ItemCount + 1;
  int i = 0;
  
  while (i < lstSaveGamesList.ItemCount)
  {
    if (lstSaveGamesList.Items[i] == txtNewSaveName.Text)
    {
      gameSlotToSaveInto = lstSaveGamesList.SaveGameSlots[i];
    }
    i++;
  }
  SaveGameSlot(gameSlotToSaveInto, txtNewSaveName.Text);
  close_save_game_dialog();
}


function lstSaveGamesList_OnSelectionCh(GUIControl *control)
{
  txtNewSaveName.Text = lstSaveGamesList.Items[lstSaveGamesList.SelectedIndex];
}


function txtNewSaveName_OnActivate(GUIControl *control)
{
  // Pressing return in the text box simulates clicking the Save button
  btnSaveGame_OnClick(control, eMouseLeft);
}

function btnDeleteSave_OnClick(GUIControl *control, MouseButton button)
{
  if (lstSaveGamesList.SelectedIndex >= 0)
  {
    DeleteSaveSlot(lstSaveGamesList.SaveGameSlots[lstSaveGamesList.SelectedIndex]);
    lstSaveGamesList.FillSaveGameList();
  }
}
// ------------ End SAVE functions -------------


// ----- RESTORE functions ---------------------

function close_restore_game_dialog()
{
  gRestoreGame.Visible = false;
  mouse.UseDefaultGraphic();
}

function btnCancelRestore_OnClick(GUIControl *control, MouseButton button)
{
  close_restore_game_dialog();
}


function btnRestoreGame_OnClick(GUIControl *control, MouseButton button)
{
  if (lstRestoreGamesList.SelectedIndex >= 0)
  {
    RestoreGameSlot(lstRestoreGamesList.SaveGameSlots[lstRestoreGamesList.SelectedIndex]);
  }
  close_restore_game_dialog();
}
// ---- End RESTORE functions


//Loading
function btnLoad_OnClick(GUIControl *control, MouseButton button)
{
  gControlPanel.Visible = false;
  mouse.UseDefaultGraphic();
  Wait(1);
 show_restore_game_dialog();
}

//Resume
function btnResume_OnClick(GUIControl *control, MouseButton button)
{
  gControlPanel.Visible = false;
  mouse.UseDefaultGraphic();
}


//----- RESTART functions -------
function btnRestart_OnClick(GUIControl *control, MouseButton button)
{
  gRestartYN.Visible=true;
   mouse.UseModeGraphic(eModePointer);
}

function btnRestartYes_OnClick(GUIControl *control, MouseButton button)
{
  RestartGame();
}

function btnRestartNo_OnClick(GUIControl *control, MouseButton button)
{
  gRestartYN.Visible = false;
  
  if (playerDead==1) QuitGame(0);
  // If the panel's not ON, then the player must have gotten here by tapping F9,
  // therefore his cursor needs restoring. If the panel IS on, then it doesn't,
  // because it's already a pointer. Get used to thinking like this!!
  if (!gControlPanel.Visible) mouse.UseDefaultGraphic(); 
}
// ----- END Restart Functions ------


//Quit
function btnQuit_OnClick(GUIControl *control, MouseButton button)
{
  gControlPanel.Visible = false;
  Wait(1);
  QuitGame(1);
  gControlPanel.Visible = true;
  mouse.UseModeGraphic(eModePointer);
}

//Audio Change
function sldAudio_OnChange(GUIControl *control)
{
  System.Volume = sldAudio.Value;
}

//Speed Change
function sldSpeed_OnChange(GUIControl *control)
{
  SetGameSpeed(sldSpeed.Value);
}


// Called when the game starts, before the first room is loaded
function game_start() 
{
   game.speech_bubble_width = 700;
   initialize_control_panel(); 

 //Initialization

 earth.freqid=53;
 earth.isOn=0;
 mars.freqid=54;
 mars.isOn=0;
 sun.freqid=55;
 sun.isOn=0;
 
 station[0].freqid=1;
 station[0].soundname="aRadiobad1";
 station[0].desc="...static..whoosh..static...";
 station[0].freq="9800.00";
 
 station[1].freqid=2;  //Sun
 station[1].soundname="aRadiosun";
 station[1].desc="...static..pop..hiss..hiss..static.hiss..pop...";
 station[1].freq="9900.10";
 
 station[2].freqid=3;
 station[2].soundname="aRadiobad2";
 station[2].desc="...OoooOOOo...";
 station[2].freq="8000.20";
 
 station[3].freqid=4;
 station[3].soundname="aRadiobad3";
 station[3].desc="...static SHHHHHH static...";
 station[3].freq="8100.30";
 
 station[4].freqid=5;  //Earth
 station[4].soundname="aRadioearth";
 station[4].desc="...static..<baseball announcer>..static...";
 station[4].freq="8200.40";
 
 station[5].freqid=6;
 station[5].soundname="aRadiostatic";
 station[5].desc="...static...";
 station[5].freq="8300.50";
 
 station[6].freqid=7;
 station[6].soundname="aRadiostatic";
 station[6].desc="...raspy static...";
 station[6].freq="8400.60";
 
 station[7].freqid=8; //Mars
 station[7].soundname="aRadiomars";
 station[7].desc="...alien speaking <loud and clear>...";
 station[7].freq="8500.70";
 
 station[8].freqid=9;
 station[8].soundname="aRadiobad4";
 station[8].desc="...loud static...";
 station[8].freq="8600.80";

 station[9].freqid=10;
 station[9].soundname="aRadiobad5";
 station[9].desc="...weird static...";
 station[9].freq="8700.90";

}

// put anything you want to happen every game cycle in here
function repeatedly_execute() 
{
  // increment our timer variable (we would have created this
  // in the Global Variables editor)
  
  if (player.Room > 2 && player.Room != 30)  timeofday++;  //Don't increase time until first room of the game.
  
  //400fps = 1 hour?
  //Night = timeofday between 0 and 2000
  //Day = timeofday between 2000 and 4000
  //Day1 = 2001-2500  Day2 = 2501-3000  Day3 = 3001-3500 Day4 = 3501-4000
  
  if (timeofday >= 0 && timeofday <= 10000) //2000
  sky = 0;
  
  if (timeofday >= 10001 && timeofday <= 12500)  //1250F
  sky = 1;
  
  if (timeofday >= 12501 && timeofday <= 15000)
  sky = 2;
  
  if (timeofday >= 15001 && timeofday <= 17501)
  sky = 3;
  
  if (timeofday >= 17500 && timeofday <= 20001)
  sky = 4;
  
  if (timeofday > 20001)
  {
    timeofday=0;
   // sky=0;
  }
  
  if (sky == 0) gWatch.BackgroundGraphic = 32;  //Night
  if (sky == 1) gWatch.BackgroundGraphic = 28;
  if (sky == 2) gWatch.BackgroundGraphic = 29;
  if (sky == 3) gWatch.BackgroundGraphic = 30;
  if (sky == 4) gWatch.BackgroundGraphic = 31;
  
  
}

// put here anything you want to happen every game cycle, even when the game is blocked
function repeatedly_execute_always() 
{


}



function show_inventory_window () 
{
  
  gInventory.Visible = true;
  // switch to the Use cursor (to select items with)
  mouse.Mode = eModeLookat;

}


// called when a key is pressed. keycode holds the key's ASCII code
function on_key_press(eKeyCode keycode) 
{
  
  if (IsGamePaused()) keycode = 0; // game paused, so don't react to keypresses
  
  //Show Watch
  if (keycode == eKeyW && hasWatch == 1) {    
    gWatch.SetPosition(445, 385);
    
        if (gWatch.Visible == true) {
          gWatch.Visible = false;
        }
        else
          gWatch.Visible = true;
  }
 
 //Show Map
  if (keycode == eKeyM && player.Room != 33) {
    gWatch.Visible = false;
    gInventory.Visible = false;
    player.ChangeRoom(33);
  }
  
  if (keycode == eKeyM && player.Room == 33) {
     gWatch.Visible = false;
     gInventory.Visible = false;
     player.ChangeRoom(player.PreviousRoom); 
  }
  
  //Show SATpad
  if (keycode == eKeyS && gNotes.Visible == false) {
     gWatch.Visible = false;
     aSatnotes.Play();
     gNotes.Visible=true;  //Pull up note pic
  
     if (mapworks) gNotes.BackgroundGraphic=46;
     if (mapworks && engineon) gNotes.BackgroundGraphic = 47;
     if (mapworks && engineon == 2 && drillon == 3) gNotes.BackgroundGraphic = 48; 
     if (mapworks && engineon == 2 && drillon == 3 && alert == 1) gNotes.BackgroundGraphic = 103;
  }
  
  if (keycode == eKeyCtrlQ) QuitGame(0); // Ctrl-Q
  if (keycode == eKeyF9) RestartGame(); // F9
  if (keycode == eKeyF12) SaveScreenShot("scrnshot.pcx");  // F12
 // if (keycode == eKeyCtrlS) Debug(0,0); // Ctrl-S, give all inventory
  if (keycode == eKeyCtrlV) Debug(1,0); // Ctrl-V, version
  //if (keycode == eKeyCtrlA) Debug(2,0); // Ctrl-A, show walkable areas
  //if (keycode == eKeyCtrlX) Debug(3,0); // Ctrl-X, teleport to room
  
   if (keycode == eKeyTab && player.Room != 1 && player.Room !=2 && player.Room != 30 && 
   player.Room != 32 && player.Room != 33)   
   show_inventory_window();  // Tab, show inventory
   
   if ((keycode == eKeyEscape) && (gInventory.Visible))
  {
    // Use ESC to close the restore game dialog
    gInventory.Visible=false;
    mouse.UseDefaultGraphic();
  }
  
 
   if ((keycode == eKeyEscape) && (gSaveGame.Visible))
  {
    // Use ESC to close the save game dialog
    close_save_game_dialog();
    return;
  }
  
  
  if ((keycode == eKeyEscape) && (gRestoreGame.Visible))
  {
    // Use ESC to close the restore game dialog
    close_restore_game_dialog();
    return;
  }
  
    if ((keycode == eKeyEscape) && gRestartYN.Visible) {
    //Use ESC to cancel restart.
    gRestartYN.Visible = false; 
    // If the panel's not ON, then the player must have gotten here by tapping F9,
    // therefore his cursor needs restoring. If the panel IS on, then it doesn't,
    // because it's already a pointer. Get used to thinking like this!!
    if (!gControlPanel.Visible) mouse.UseDefaultGraphic(); 
    return;
  }
  
  if ((keycode == eKeyEscape) && gControlPanel.Visible) {
    // Use ESC to turn the panel off.
    gControlPanel.Visible = false; 
    mouse.UseDefaultGraphic();
    return;
  }
  
    // FUNCTION KEYS AND SYSTEM SHORTCUTS
  if (keycode == eKeyEscape) {
    // ESC
    gControlPanel.Visible = true; 
    mouse.UseModeGraphic(eModePointer);
  }
    
}

function on_mouse_click(MouseButton button) // called when a mouse button is clicked. button is either LEFT or RIGHT
{
  if (IsGamePaused() == 1) // Game is paused, so do nothing (ie. don't allow mouse click)
  {
  }
  else if (button == eMouseLeft) 
  {
    ProcessClick(mouse.x,mouse.y, mouse.Mode);
  }
  else // right-click, so cycle cursor
  {   
    mouse.SelectNextMode();
  }
}


function dialog_request(int param) {
}


// ===================================
// Inventory Actions
// ===================================
function bInvExit_OnClick(GUIControl *control, MouseButton button)
{
    gInventory.Visible = false;
    mouse.UseDefaultGraphic();
   
   if (gWatch.Visible==true) {gWatch.Visible = false;}
}

function bInvOK_OnClick(GUIControl *control, MouseButton button)
{
  if (player.ActiveInventory != null)
    mouse.Mode=eModeUseinv;
   gInventory.Visible=false;
   if (gWatch.Visible==true) {gWatch.Visible = false;}
}

//Inventory Select button
function bSelect_OnClick(GUIControl *control, MouseButton button)
{
   mouse.Mode = eModeInteract;

}

//Inventory Inspect button
function bInspect_OnClick(GUIControl *control, MouseButton button)
{
  mouse.Mode = eModeLookat;
}

function gNotes_OnClick(GUI *theGui, MouseButton button)
{
  gNotes.Visible=false;   //click anywhere to close notes
}

function iInvWires_Look()
{
  gWatch.Visible = false;
  Display("Wires I pulled out of a radio.");
}


function iInvPrimer_Look()
{
  gWatch.Visible = false;
  aBookpage.Play();
  //Make primer page visible here instead.
  Display("Let's see... this is somewhat interesting.");
  Display("'Martians use color as a measurement indicator.'");
   aBookpage.Play();
  Display("'For example, their clocks use color intensity to signify the time of day.'");
   aBookpage.Play();
  Display("'They mirror the sky on Mars.'");
  Display("'Color intensity is also used in their speed indicators.'");
   aBookpage.Play();
  Display("'Speedometers in Martian cars are simply a block of color. The color grows darker, as the car goes faster.'");
   aBookpage.Play();
  Display("Hmm... good to know.");
  
}


function iInvLaces_Look()
{
  gWatch.Visible = false;
  Display("Laces from a pair of boots.");
}

function iInvCoin_Look()
{
  gWatch.Visible = false;
  Display("An old martian coin.");
}

function iInvDefault_Look()
{
  gWatch.Visible = false;
  Display("Default object.");
}

function iInvDrill_Look()
{
  gWatch.Visible = false;
  Display("A hand drill. It can drill through rock and ice.");
}
// =======================  END Inventory Actions =================================



//Look at Self
function cSal_Look()
{
  Display("My modern space suit can handle most extreme elements.");
  Display("And is still flexible enough for me to do my work.");
}

//Touch Self
function cSal_Interact()
{
  Display("They're paying me to work, not touch myself.");
}

//Close Engine Control Panel
function bExitPanel_OnClick(GUIControl *control, MouseButton button)
{
   gPanel.Visible=false;
   player.ChangeRoom(7, 440, 220);
}

//Look at Watch GUI
/*function iInvWatch_Look()
{
  if (gWatch.Visible == true) {
  gWatch.Visible = false;
  }
  else {
  if (sky == 0) gWatch.BackgroundGraphic = 32;  //Night
  if (sky == 1) gWatch.BackgroundGraphic = 28;
  if (sky == 2) gWatch.BackgroundGraphic = 29;
  if (sky == 3) gWatch.BackgroundGraphic = 30;
  if (sky == 4) gWatch.BackgroundGraphic = 31;
  
  gWatch.SetPosition(445, 385);
  gWatch.Visible = true;
  }
  
}*/

//Click ON watch GUI
function gWatch_OnClick(GUI *theGui, MouseButton button)
{
  gWatch.Visible=false;
}

//Nap GUI NO
function bNo_OnClick(GUIControl *control, MouseButton button)
{
  gNap.Visible = false;
}

//Nap GUI Yes
function bYes_OnClick(GUIControl *control, MouseButton button)
{
  gNap.Visible = false;

  
  //Nap for 4 hours.
  if ( (timeofday + 4000) > 20000 ) {
    timeofday = (timeofday + 4000) - 20000;   
  }
  else
    timeofday = timeofday + 4000;
  
  if (player.Room == 4) {
      player.LockView(VNAP);
      player.Animate(0, 4, eOnce, eBlock);
      FadeOut(1);
     
      FadeIn(1);
      player.Animate(0, 8, eOnce, eBlock, eBackwards);
      player.UnlockView();
      player.Walk(241, 283, eBlock);
      Display("That killed some time, and I feel refreshed.");
  }
  
  if (player.Room == 9) {
      player.Walk(491, 386, eBlock);
      FadeOut(1);
     
      FadeIn(1);
      Display("That killed some time, and I feel refreshed.");
  }
  
}

function bArrayPanel_OnClick(GUIControl *control, MouseButton button)
{
  gArrayPanel.Visible=false;
  player.ChangeRoom(6, 224, 419);
}

function btnSave_OnClick(GUIControl *control, MouseButton button)
{
    show_save_game_dialog();
}

function sldGamma_OnChange(GUIControl *control)
{
  // Set the gamma. Note there's no need to check for anything else, as we ensured,
  // in game_start, that the slider won't even appear if it's not possible to do this.
  System.Gamma = sldGamma.Value;
}


function iInvLaces_UseInv()
{
    if (player.ActiveInventory == iInvLaces2)  {
      
      Display("I can combine these into one very long lace.");
      player.LoseInventory(iInvLaces);
      player.LoseInventory(iInvLaces2);
      player.AddInventory(iInvLonglaces);
      GiveScore(5);
      aDing.Play();      
    }
    else
    {
      Display("That wouldn't make sense.");
    }
}

function iInvLaces2_UseInv()
{
     if (player.ActiveInventory == iInvLaces)  {
      
      Display("I can combine these into one very long lace.");
      player.LoseInventory(iInvLaces);
      player.LoseInventory(iInvLaces2);
      player.AddInventory(iInvLonglaces);
      GiveScore(5);
      aDing.Play();      
    }
    else
    {
      Display("That wouldn't make sense.");
    }
}

function bMapClose_OnClick(GUIControl *control, MouseButton button)
{
      gMapClose.Visible=false;
      player.ChangeRoom(player.PreviousRoom);
}

function iInvLonglaces_Look()
{
   Display("My very very long shoelace rope.");
}

function iInvManual_Look()
{
  Display("It's the shuttle flight manual. I have what I need to get the hell out of here.");
}
